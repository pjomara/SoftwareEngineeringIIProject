Weekly Project Report

Week ending October 1 (week 5)

Progress:
This week we completed the coding that converts the nutritional data from per 100gm to whatever is called for in the recipe.  For example, if a recipe calls for 1 tsp of salt the app will calculate the nutritional data (sodium) for 1 tsp rather than for 100 gms.  We also added several more nutrients (sugar, fat) to the print-out and all recipe data is now compiled in a single list. For this list, each separate ingredient with its nutritional data is embedded as a list within the list.  The correctly calculated nutritional data was the goal of this sprint.

Next sprint:
This is a two-week sprint with an end date of 10/15.  The main goal for this sprint is to get a GUI up-and-running.  Currently, we are using Visual Studio to create the GUI.  This uses C#, so the Python code will need to be re-written/ converted.  The GUI will include a drop-down for measurement unit (i.e.- tsp, cup, tbsp) and buttons for the "more ingredients?" variable.  Additional goals for this sprint include adding calculator for ingredients given in ounces (oz.) and adding calculator to account for serving size.  This sprint was crafted based on discussion between the group and customer.

Issues to be addressed:
Using SQL to query the database returns the first 'hit' found in the database.  For example, if you search for 'flour', the search will return 'whole wheat flour' because that is the first field containing the word 'flour' encounted when reading the database.  One possible solution is to create a query that returns all relevant hits and lists then in a drop-down from which one can be selected.

week ending October 8 (week 6)

Progress:
Worked on coding to convert ingredients given in ounces.  Completed testing and made corrections to converter function.

Sprint:
In week two of two-week sprint.  Goals for sprint are to complete a GUI.

Progress report for week ending 10/15

We completed most of the tasks listed in the last sprint (ending 10/14).  We now have a working prototype that takes command-line input of ingredients with unit and amount. The conversion function has been completed; nutritional information is now being reported corresponding the amount entered (IE- 1 cup of flour is reported as 1 cup of flour rather than 100 gms of flour).  The app output is a txt file containing the ingredients including amounts and units plus the total nutritional content of the recipe including calories, protein, sodium, fat, and sugar.

Additonal functions added are converter for ingredients added in ounces and a "serving size" function.

The user interface is being developed using Visual Studio but is not yet fully functional.  Currently it has been developed to the point that an ingredient, unit , and amount can be input and the nutritional information from the database will be returned.

The next sprint (ending 10/29) includes continued development of the user interface (this includes conversion of the Python code to C#), a function to save recipes, better formatting of the nutritional label, and extensive testing of the converter function.

Progress report for week ending 10/22

We did not complete many tasks this past week but we made progress on each item in the bi-weekly sprint.  We are working on the coding to make the nutritional labels fit a more standard format.  We continue to work on the user interface and we have a working prototype of the recipe-saving functionality.  Two items completed but not included in the sprint are converters for ounces and a "serving size" feature.  The serving size features asks the user for serving size when they create a new recipe.  All the nutritional values are then divided by the serving size.

Progress report for week ending 10/29
Further progress was made regarding the user interface.  The user interface, an Android App, can now accept an ingredient, generate a list of items containing the ingredient, and return the nutritional informationm for that ingredient.

The coding to format the nutritional information is nearly complete and needs to be added to the main app (nutrApp.py).

I created a separate app, recipe_retrieve.py, that allows a user to recall a recipe and print to the screen.  Several functions have been added to nutrapp.py that write the recipe title and ingredients/ nutritional information to recipe.sqlite and ingredients.sqlite respectively.  In recipe.sqlite, a unique identifier is added to the recipe title.  Each ingredient, with the converted nutritional informaion and the unique recipe ID is written to ingredients.sqlite.  Using the ID number, the recipe title, serving size, ingredients, and nutritional information can be pulled and printed to the screen.

Progress report for week ending 11/5
Database
I created a new database to possibly replace USDAData.db.  The new database, currently called newFoodDatabase.sqlite uses the long, more descriptive names of ingredients and lists nearly all ingredients in the USDA database.  I removed restaurant food, baby food, fast food, and baked goods as these are probably not going to be used in most recipes but would complicate search results.  Also, the original database (with short descriptions) uses many abbreviations for ingredients that a user, unless they knew the abbreviation, would have difficulty finding.  For example, in the the short descriptions, the word coconut does not appear.  Instead, the abbreviation, cocnt is used, therefore, all searches using the term "coconut" would find no results. The reason for creating a new database is to address the need for more ingredients.

Issues: Some of the column headings need to be changed (or the code needs to be changed) to match the SQL queries in the code.  Also, the most common use fields have to be edited.  Currently, the amount and unit are held in one field (IE- 1 tbsp).  This needs to be separated into two fields.  This may be a daunting task as there are about 7500 ingredients in the database.  perhaps a script to iterate through the file can be designed and implemented.

Labels
Eric continues to work on creating a nurrition label that more resembles an actual label.  He has completed this in a branch and is conducitng testin before merging with the master branch.

Data structure (convert())
Eric re-wrote the convert() function to incorporate a data structure (dictionary) to replace the long if-then statement.  This is in testing in his branch and will be incorporated into the master this week.

French conversion
Sean completed most of the conversion to french.  He translated all comments, input prompts, and output messages.  Eric completed converting the nutrition label. Steve has translated all relevant work in the user interface.

User interface
Steve continues working on the user interface.
